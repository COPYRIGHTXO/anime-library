You want to run a script at the start of the page that checks if a JSON file exists, and if not, displays a text and a button in the center of the page. When the button is clicked, it should open a file dialog for the user to select a folder.

Here's an example of how you can achieve this using JavaScript and HTML:

html
CopyInsert
<!-- Add a container for the text and button -->
<div id="folder-selector" style="display: none; text-align: center;">
  <p>Please select a folder to connect to.</p>
  <button id="select-folder-btn">Select Folder</button>
</div>

<!-- Add a script to check for the JSON file and display the text and button if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the JSON file exists
    if (!localStorage.getItem('jsonFile')) {
      // Display the text and button
      document.getElementById('folder-selector').style.display = 'block';
    }
  };

  // Add an event listener to the button to open the file dialog
  document.getElementById('select-folder-btn').addEventListener('click', function() {
    // Open the file dialog
    const input = document.createElement('input');
    input.type = 'file';
    input.webkitdirectory = true; // Allow directory selection
    input.addEventListener('change', function() {
      // Get the selected folder
      const folder = input.files[0].path;
      // Save the folder path to local storage
      localStorage.setItem('jsonFile', folder);
      // Hide the text and button
      document.getElementById('folder-selector').style.display = 'none';
    });
    input.click();
  });
</script>
This script uses the localStorage API to store the path to the selected folder. If the JSON file doesn't exist, it displays the text and button in the center of the page. When the button is clicked, it opens a file dialog that allows the user to select a folder. Once a folder is selected, it saves the folder path to local storage and hides the text and button.

Note that this script uses the webkitdirectory attribute to allow directory selection in the file dialog. This attribute is supported in most modern browsers, but may not work in older browsers.






t

You
7:09 pm, Nov 28, 2024
after thinking about it , let it upload the json file first, if there is not it will let me select a folder and let me put the json file anywhere i want

Codeium
7:10 pm, Nov 28, 2024
If you want the script to first check if a JSON file exists, and if not, allow the user to upload a JSON file from their local machine, you can modify the previous script as follows:

html
CopyInsert
<!-- Add a container for the file input and button -->
<div id="file-uploader" style="display: none; text-align: center;">
  <p>Please upload a JSON file.</p>
  <input type="file" id="json-file-input" accept=".json">
  <button id="upload-json-btn">Upload JSON</button>
</div>

<!-- Add a script to check for the JSON file and display the file uploader if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the JSON file exists
    if (!localStorage.getItem('jsonFile')) {
      // Display the file uploader
      document.getElementById('file-uploader').style.display = 'block';
    }
  };

  // Add an event listener to the button to upload the JSON file
  document.getElementById('upload-json-btn').addEventListener('click', function() {
    // Get the selected file
    const file = document.getElementById('json-file-input').files[0];
    // Read the file as text
    const reader = new FileReader();
    reader.onload = function() {
      // Save the JSON file to local storage
      localStorage.setItem('jsonFile', reader.result);
      // Hide the file uploader
      document.getElementById('file-uploader').style.display = 'none';
    };
    reader.readAsText(file);
  });
</script>
This script uses the localStorage API to store the JSON file. If the JSON file doesn't exist, it displays the file uploader in the center of the page. When the user selects a JSON file and clicks the "Upload JSON" button, it reads the file as text and saves it to local storage. Once the JSON file is uploaded, it hides the file uploader.

Note that this script uses the FileReader API to read the selected file as text. The accept attribute of the file input is set to .json to restrict the file type to JSON.






