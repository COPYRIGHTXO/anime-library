You want to run a script at the start of the page that checks if a JSON file exists, and if not, displays a text and a button in the center of the page. When the button is clicked, it should open a file dialog for the user to select a folder.

Here's an example of how you can achieve this using JavaScript and HTML:

html
CopyInsert
<!-- Add a container for the text and button -->
<div id="folder-selector" style="display: none; text-align: center;">
  <p>Please select a folder to connect to.</p>
  <button id="select-folder-btn">Select Folder</button>
</div>

<!-- Add a script to check for the JSON file and display the text and button if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the JSON file exists
    if (!localStorage.getItem('jsonFile')) {
      // Display the text and button
      document.getElementById('folder-selector').style.display = 'block';
    }
  };

  // Add an event listener to the button to open the file dialog
  document.getElementById('select-folder-btn').addEventListener('click', function() {
    // Open the file dialog
    const input = document.createElement('input');
    input.type = 'file';
    input.webkitdirectory = true; // Allow directory selection
    input.addEventListener('change', function() {
      // Get the selected folder
      const folder = input.files[0].path;
      // Save the folder path to local storage
      localStorage.setItem('jsonFile', folder);
      // Hide the text and button
      document.getElementById('folder-selector').style.display = 'none';
    });
    input.click();
  });
</script>
This script uses the localStorage API to store the path to the selected folder. If the JSON file doesn't exist, it displays the text and button in the center of the page. When the button is clicked, it opens a file dialog that allows the user to select a folder. Once a folder is selected, it saves the folder path to local storage and hides the text and button.

Note that this script uses the webkitdirectory attribute to allow directory selection in the file dialog. This attribute is supported in most modern browsers, but may not work in older browsers.






t

You
7:09 pm, Nov 28, 2024
after thinking about it , let it upload the json file first, if there is not it will let me select a folder and let me put the json file anywhere i want

Codeium
7:10 pm, Nov 28, 2024
If you want the script to first check if a JSON file exists, and if not, allow the user to upload a JSON file from their local machine, you can modify the previous script as follows:

html
CopyInsert
<!-- Add a container for the file input and button -->
<div id="file-uploader" style="display: none; text-align: center;">
  <p>Please upload a JSON file.</p>
  <input type="file" id="json-file-input" accept=".json">
  <button id="upload-json-btn">Upload JSON</button>
</div>

<!-- Add a script to check for the JSON file and display the file uploader if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the JSON file exists
    if (!localStorage.getItem('jsonFile')) {
      // Display the file uploader
      document.getElementById('file-uploader').style.display = 'block';
    }
  };

  // Add an event listener to the button to upload the JSON file
  document.getElementById('upload-json-btn').addEventListener('click', function() {
    // Get the selected file
    const file = document.getElementById('json-file-input').files[0];
    // Read the file as text
    const reader = new FileReader();
    reader.onload = function() {
      // Save the JSON file to local storage
      localStorage.setItem('jsonFile', reader.result);
      // Hide the file uploader
      document.getElementById('file-uploader').style.display = 'none';
    };
    reader.readAsText(file);
  });
</script>
This script uses the localStorage API to store the JSON file. If the JSON file doesn't exist, it displays the file uploader in the center of the page. When the user selects a JSON file and clicks the "Upload JSON" button, it reads the file as text and saves it to local storage. Once the JSON file is uploaded, it hides the file uploader.

Note that this script uses the FileReader API to read the selected file as text. The accept attribute of the file input is set to .json to restrict the file type to JSON.






after thinking about it i want the function to check if there is a cookie in the browser 
for this website, the cookie will have the information for the needs of the website, if there 
is not it will ask to link a folder, the folder can be empt

Codeium
11:05 am, Nov 29, 2024
So you want the script to check if a cookie exists in the browser for your website, 
and if it does, use the information stored in the cookie to configure the website. 
If the cookie doesn't exist, you want the script to prompt the user to select a folder, 
which can be empty.

Here's an example of how you can achieve this using JavaScript:

html
CopyInsert
<!-- Add a container for the folder selector -->
<div id="folder-selector" style="display: none; text-align: center;">
  <p>Please select a folder to link to this website.</p>
  <input type="file" id="folder-input" webkitdirectory directory>
  <button id="link-folder-btn">Link Folder</button>
</div>

<!-- Add a script to check for the cookie and display the folder selector if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the cookie exists
    const cookie = getCookie('websiteConfig');
    if (!cookie) {
      // Display the folder selector
      document.getElementById('folder-selector').style.display = 'block';
    } else {
      // Use the information stored in the cookie to configure the website
      configureWebsite(cookie);
    }
  };

  // Add an event listener to the button to link the folder
  document.getElementById('link-folder-btn').addEventListener('click', function() {
    // Get the selected folder
    const folder = document.getElementById('folder-input').files[0].path;
    // Create a cookie with the folder information
    setCookie('websiteConfig', folder, 30); // expires in 30 days
    // Hide the folder selector
    document.getElementById('folder-selector').style.display = 'none';
    // Configure the website using the folder information
    configureWebsite(folder);
  });

  // Helper function to get a cookie
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  // Helper function to set a cookie
  function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
  }

  // Function to configure the website using the folder information
  function configureWebsite(folder) {
    // TO DO: implement the logic to configure the website using the folder information
  }
</script>
This script uses the getCookie and setCookie helper functions to interact with cookies. 
If the cookie doesn't exist, it displays the folder selector and allows the user to select a folder.
 Once a folder is selected, it creates a cookie with the folder information and hides 
 the folder selector. The configureWebsite function is called with the folder information 
 to configure the website.

Note that this script uses the webkitdirectory attribute to allow directory selection in 
the file input. This attribute is supported in most modern browsers, but may not work in 
older browsers.








i didn't meantion that when selecting the folder even if empty it will check if 
there is files like the json, a folder for the video picture, and other folders 
that are mapped in the json file, if there is not it will make a json file and a 
folder for the pictures/thumbnails for the shows/films, then it will make a cokie 
for website that connects to that file, it will expire in 30 days of website unvisit

Codeium
11:11 am, Nov 29, 2024
So, when the user selects a folder, even if it's empty, the script will check if 
the required files and folders exist, such as the JSON file, a folder for video pictures, 
and other folders mapped in the JSON file. If they don't exist, the script will create them.

Here's an updated example of how you can achieve this:

html
CopyInsert
<!-- Add a container for the folder selector -->
<div id="folder-selector" style="display: none; text-align: center;">
  <p>Please select a folder to link to this website.</p>
  <input type="file" id="folder-input" webkitdirectory directory>
  <button id="link-folder-btn">Link Folder</button>
</div>

<!-- Add a script to check for the cookie and display the folder selector if it doesn't exist -->
<script>
  window.onload = function() {
    // Check if the cookie exists
    const cookie = getCookie('websiteConfig');
    if (!cookie) {
      // Display the folder selector
      document.getElementById('folder-selector').style.display = 'block';
    } else {
      // Use the information stored in the cookie to configure the website
      configureWebsite(cookie);
    }
  };

  // Add an event listener to the button to link the folder
  document.getElementById('link-folder-btn').addEventListener('click', function() {
    // Get the selected folder
    const folder = document.getElementById('folder-input').files[0].path;
    // Check if the required files and folders exist
    if (!fs.existsSync(`${folder}/config.json`)) {
      // Create the JSON file
      const jsonData = {
        // default config data
      };
      fs.writeFileSync(`${folder}/config.json`, JSON.stringify(jsonData));
    }
    if (!fs.existsSync(`${folder}/thumbnails`)) {
      // Create the thumbnails folder
      fs.mkdirSync(`${folder}/thumbnails`);
    }
    // ... check and create other required folders and files ...

    // Create a cookie with the folder information
    setCookie('websiteConfig', folder, 30); // expires in 30 days
    // Hide the folder selector
    document.getElementById('folder-selector').style.display = 'none';
    // Configure the website using the folder information
    configureWebsite(folder);
  });

  // Helper function to get a cookie
  function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }

  // Helper function to set a cookie
  function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
  }

  // Function to configure the website using the folder information
  function configureWebsite(folder) {
    // TO DO: implement the logic to configure the website using the folder information
  }
</script>
This script uses the fs module to interact with the file system. When the user selects a folder, 
it checks if the required files and folders exist, and creates them if they don't. 
It then creates a cookie with the folder information and hides the folder selector.

Note that this script assumes that the fs module is available in the browser. 
If you're running this script in a Node.js environment,
you'll need to use the fs module from the node:fs package. 
If you're running this script in a browser, 
you may need to use a different approach to interact with the file system.

Also, this script uses the webkitdirectory attribute to allow directory selection in the file input. 
This attribute is supported in most modern browsers, but may not work in older